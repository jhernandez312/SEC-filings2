import os
import json
from openai import OpenAI
from dotenv import load_dotenv, find_dotenv
from sec_api import ExtractorApi
import project.prompt_utils as prompt_utils


# load the .env file
_ = load_dotenv(find_dotenv())
client = OpenAI(
    api_key = os.environ.get('OPENAI_API_KEY'),
)

model = "gpt-3.5-turbo-0125"
temperature = 0.3
max_tokens = 2096
company = ""



def new_prompt():
    """
    Generates a new prompt for the OpenAI model by reading and processing data from a JSON file.
    This function reads SEC filing data, converts it to a structured JSON string, and then uses utility functions
    to generate a conversation prompt that the AI model will respond to.

    Returns:
    list: A list of dictionaries representing the conversation context, where each dictionary contains a 'role'
          (either 'system' or 'user') and 'content' for the message.
    """

    # load the JSON file
    with open('sec_data.json', 'r', encoding='utf-8') as file:
        data = json.load(file)

    # convert the dictionary to a string
    json_string = json.dumps(data, indent=4)  # 'indent' makes the output readable


    #prompts
    system_message = prompt_utils.system_message
    prompt = prompt_utils.generate_prompt(json_string)

    messages=[

        {"role": "system", "content": system_message},
        {"role": "user", "content": prompt}
    ]
    return messages



def get_summary():
    """
    Generates a summary by first creating a new prompt based on SEC data and then querying the OpenAI model.
    This function handles the communication with the OpenAI API to get a natural language summary or response
    based on the prompt generated by the new_prompt function.

    Returns:
    str: The content of the response from the OpenAI model, which is a summary or analysis of the SEC data.
    """
    messages = new_prompt()
    completion = client.chat.completions.create(
        model=model,
        messages=messages,
        temperature=temperature,
        max_tokens=max_tokens,
    )
    return completion.choices[0].message.content